/*
Функции middleware: метод use - цепочка обработчиков
Функция next у обработчика есть всегда

МонгоДБ документно-орентированна. Основными сущностями которые хранятся в ней являются
документы и коллекции. Если представить анологию то коллеции это массив в js, а документы
это обьекты js

МонгоДБ по умолчанию умеет выполнять js.
Разница между реляционными БД и Монго довольно существенная: абсолютно различные парадигмы, обсолютно
различные способы хранения. Постгресс(реляционные) отличаются строгостью, надежностью тогда как Монго
отличается простотой, скоростью

Особенности МонгоДБ
1. В одной и той же коллекции могут лежать обсолютно различные документы
2. МонгоБД достаточно быстра, надежна и проста
3. У монгоДБ нет транзакций (минус). Транзакция это набор операций которые можно поручить выполнить БД.
Например финансовое приложение, есть два пользователя Вася и Маша и мы хотим перевести 100р со счета Вася на
счет Маши. Вот это оперция (перевод денег) это не один запрос к БД а два: мы хотим снять деньги с Васи и 
увеличить счет Маши и если в результате увеличения счета Маши произойдет какая-то ошибка, то нам очень важно,
чтобы БД привела все к изначальному состоянию. Так вот монгоДБ так не умеет :( 

mongoose.set('debug', true) скажет монгусу выводить все операции с бд в консоль

Одна из самых дорогих операций установление TCP соединения между сервером и БД
poolSize - колличество одновременных подключений

Схема ничто иное как класс который принимает в качестве входных парамметров обьект, ключи которого являются
полями (будующей модели), а в качестве значений описание (конфигурирование) этих полей

Поле __v создается монгусом автоматически и нужно для того чтобы если два пользователя редактируют одновременно
один и тот же документ, изминения не наложились друг для друга

Монгус позволяет переиспользовать схемы в других схемах

Переопределение промисов в некоторых библиотеках (на нативные промисы) связанно с тем, что когда промисы только
появились многие библиотеки начали предлогать свои реализации и не все оказались удачными
mongoos.Promise = Promise

Если в любую функцию монгуса не передавать колбек то эта функция вернет промис

Ошибки уникальности могут быть гарантированны только самой БД, монгус, к сожалению, ничем нам помоч не может,
но монгус позволяет такие ошибки перехватывать

Node.js процесс если видит что есть какое-то текущее подключение, то процесс не завершается. Например если у нас
есть подключение к базе данных, то Node.js процесс подразумевает что будут выполнятся запросы. Поэтому стоит 
делать mongoose.disconnect() (что бы процесс не подвис). В реальных проектах монгус дисконект выполняют только
при остановке сервера

виртуальные поля - Иногда нам хочется выполнять одни и те же действия (вызывать одни и те же поля), но при этом сами
поля хранится в бд не должны. Например fullname: очевидно что если у пользователя есть поля имя и фамилия, то хранить
дополнительные поля в виде fullname не правильно

Всегда когда отдаем информацию пользователю из БД у нас должен быть этап трансформации (маппинга), мы должны лишние
поля (служебные) убирать

Когда браузер делает запросы, то по умолчанию он к каждому запросу добавляет заголовок Accept. Вообще говоря этот
заголовок должны добавлять не только браузеры но и все клиенты которые делают http запросы. Этот заголовок говорит
о том, какой тип контента в приоритете хочет получить тот кто делает запрос.
Если запросы делают через ajax, то такие заголовки автоматически не проставляются, но если использовать библиотеки
то они почти все его автоматически проставляют
*/